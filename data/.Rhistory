ss_uy<-function(alpha=0.05,cv=1,er,ff=FALSE,N,efect=1,tnr=0){
z<-qnorm(1-alpha/2)
n0<-((z^2)*(cv^2))/(er^2)
n<-n0
if(isTRUE(ff)){
n<-n0/(1+(n0/N))
}
nf<-(n*efect)/(1-tnr)
print(paste("cv=",round(er/z,3)))
#print(paste("n=",round(nf)))
return(nf)
}
n<-ceiling(ss_uy(er=0.07,N=500,cv=0.8,ff=T,tnr=0.1))
n0<-ceiling(ss_uy(er=0.06,N=600,cv=0.7,ff=T,tnr=0))
nd<-ceiling(ss_uy(er=0.13,N=600,cv=0.7,ff=T,tnr=0))
n
n0
n<-ceiling(ss_uy(er=0.07,N=600,cv=0.7,ff=T,tnr=0.1))
n0<-ceiling(ss_uy(er=0.07,N=600,cv=0.7,ff=T,tnr=0))
n
\n0
n0
nd
94*3
n0<-ceiling(ss_uy(er=0.066,N=600,cv=0.7,ff=T,tnr=0))
n0<-ceiling(ss_uy(er=0.06,N=600,cv=0.7,ff=T,tnr=0))
n0
n<-ceiling(ss_uy(er=0.06,N=600,cv=0.7,ff=T,tnr=0.1))
n
94(3)
94*3
30000/5000
30000/4000
5/45
4*40
5/45
45*78
34+78
5/45
45*78
34+78
34+78##esto es una suma
ntarios
########################
5/45
########################
# Autor: Alvaro Chirino
# Objetivo: Introducción a R
########################
?mean
?exp
exp(1000)
exp(10)
sqrt(25)#raiz cuadrada
########################
# Autor: Alvaro Chirino
# Objetivo: Introducción a R
########################
# comandos para instalar paquetes
install.packages("haven")#importar bases de datos
########################
# Autor: Alvaro Chirino
# Objetivo: Introducción a R
########################
# comandos para instalar paquetes
install.packages("haven")#importar bases de datos
install.packages("readxl")#importar excel
install.packages("dplyr")# gramática de datos
install.packages("ggplot2")# gramática de gráficos
install.packages("Rmarkdown")# habilitar el markdown
install.packages("rmarkdown")# habilitar el markdown
install.packages("rmarkdown")
# cargar un paquete
library(haven)
# cargar un paquete
library(haven)
library(readxl)
require(dplyr,ggplot2,rmarkdown)
install.packages("rmarkdown")# habilitar el markdown
require(dplyr,ggplot2,rmarkdown)
require(dplyr,ggplot2)
library(dplyr)
library(ggplot2)
library(rmarkdown)
# cargar un paquete
library(haven)
library(readxl)
library(dplyr)
library(ggplot2)
library(rmarkdown)
library(help=haven)
library(help=haven)
################################################
#estructura en R/asignación
#homogéneas - scalar
x1<-4
x1
x2=6
x2
x3<-"hola"
(5>10)
x4<-(5>10)
x5<-(x1<x2)
class(x1)
class(x3)
class(x4)
x6<-hola
hola<-45
x6<-hola
(5>10)
x7<-FALSE
x8<-F
X9<-NULL
1/0
##VECTORES
v1<-c(12,34,23,12,34,23,23)
v2<-c(x1,x2)
v1
v2
v3<-c("hola","chau","lunes")
v3
v4<-c(1,2,"hola")
v4
v1
v1>20
v5<-v1>20
1:100
v6<-1:100
v6
seq(0,1000,5)
v7<-seq(0,1000,5)
rep(1,10)
v8<-rep(1,10)
#genera números aleatorios de una distribución Uniforme
runif(1)
#genera números aleatorios de una distribución Uniforme
runif(1)
#genera números aleatorios de una distribución Uniforme
runif(1)
#genera números aleatorios de una distribución Uniforme
runif(1)
#genera números aleatorios de una distribución Uniforme
runif(1)
#genera números aleatorios de una distribución Uniforme
runif(1,0,100)
#genera números aleatorios de una distribución Uniforme
runif(1,0,100)
#genera números aleatorios de una distribución Uniforme
runif(1,0,100)
#genera números aleatorios de una distribución Uniforme
runif(1,0,100)
#genera números aleatorios de una distribución Uniforme
runif(1,0,100)
#genera números aleatorios de una distribución Uniforme
runif(1,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
#genera números aleatorios de una distribución Uniforme
runif(10,0,100)
round(runif(10,0,100),0)
round(runif(10,0,100),0)
round(runif(10,0,100),0)
round(runif(10,0,100),0)
round(runif(10,0,100),0)
round(runif(10,0,100),0)
round(runif(10,0,100),0)
round(runif(10,0,100),0)
round(runif(10,0,100),0)
v9<-round(runif(10,0,100),0)
v9<-round(runif(10,0,100),0)
runif(100)
sort(runif(100))
runif(100)
runif(100)>0.5
runif(100)>0.5
v6
sum(v6)
sqrt(v6)
sum(sqrt(v6))
exp(v6)
sum(exp(v6))
v6
v6/10
(v6/10)^2
v6+2*v6
v6+2*v1
setwd("C:\\Users\\ALVARO\\Documents\\GitHub\\R_ie\\data")
dir()
read.csv("ranking.csv")
bd<-read.csv2("ranking.csv")
object.size(bd)
object.size(bd)/10**6
bd
names(bd)
View(bd)
library(dplyr)
bd %>% group_by(moneda) %>% summarise(sum(monto_adjudicado))
bd %>% group_by(anio, moneda) %>% summarise(sum(monto_adjudicado))
bd %>% group_by(anio,nivel_entidad, moneda) %>% summarise(sum(monto_adjudicado))
t1<-bd %>% group_by(anio,nivel_entidad, moneda) %>% summarise(sum(monto_adjudicado))
View(t1)
t1<-bd %>% group_by(anio,entidad, moneda) %>% summarise(sum(monto_adjudicado))
View(t1)
t1<-bd %>% group_by(anio,entidad, moneda) %>% summarise(ss=sum(monto_adjudicado))
t1$ss/1000000
t1<-t1$ss/1000000
t1<-bd %>% group_by(anio,entidad, moneda) %>% summarise(ss=sum(monto_adjudicado))
t1$ss<-t1$ss/1000000000
View(t1)
t1$ss<-t1$ss/100
t1$ss<-t1$ss/10
